import{kE as x,lj as w,kF as I,ge as O,gf as E,gg as k,gh as M,kG as T,kS as F,lk as J,aF as L,r as P,bu as $,lI as v,fu as g,fk as N,k as b,q as f,J as R,ek as j,fm as q,kT as U,ll as A,aH as s,aI as o,fo as V,dc as z,gk as G,aJ as H,gl as _,iy as C}from"./index.d0d680cc.js";import{E as D,y as K,X as W}from"./SublayersOwner.38b91072.js";import{c as B}from"./ExportImageParameters.d632e4c3.js";import{n as S}from"./sublayerUtils.1bd2b95e.js";import"./Version.076968ed.js";import"./floorFilterUtils.69500d62.js";let r=class extends x(w(I(D(K(O(E(k(M(T(F(J(L(_))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const y=i.supportedImageFormatTypes;return y&&y.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,y,t){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:a})=>a&&a.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const a=v(t.origin);if(a===g.PORTAL_ITEM){const h=this.createSublayersForOrigin("service").sublayers;n=S(l,h,g.SERVICE)}else if(a>g.PORTAL_ITEM){const h=this.createSublayersForOrigin("portal-item");n=S(l,h.sublayers,v(h.origin))}}const p=[],c={writeSublayerStructure:n,...t};let u=n;l.forEach(a=>{const h=a.write({},c);p.push(h),u=u||a.originOf("visible")==="user"}),p.some(a=>Object.keys(a).length>1)&&(i.layers=p),u&&(i.visibleLayers=l.filter(a=>a.visible).map(a=>a.id))}createExportImageParameters(e,i,y,t){const l=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new B({layer:this,floors:t==null?void 0:t.floors,scale:N({extent:e,width:i})*l}),p=n.toJSON();n.destroy();const c=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},u=e&&e.spatialReference,a=u.wkid||JSON.stringify(u.toJSON());p.dpi*=l;const h={};if(t!=null&&t.timeExtent){const{start:m,end:d}=t.timeExtent.toJSON();h.time=m&&d&&m===d?""+m:`${m==null?"null":m},${d==null?"null":d}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:a,imageSR:a,size:i+","+y,...p,...c,...h}}async fetchImage(e,i,y,t){var p;const l={responseType:"image",signal:(p=t==null?void 0:t.signal)!=null?p:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,i,y,t),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});return f(n,l).then(c=>c.data).catch(c=>{throw R(c)?c:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:c})})}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:y}=await f(this.url,i),{extent:t,fullExtent:l,timeExtent:n}=y,p=t||l;return{fullExtent:p&&j.fromJSON(p),timeExtent:n&&q.fromJSON({start:n[0],end:n[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return A(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:y}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});y&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([o({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([o()],r.prototype,"dpi",void 0),s([o()],r.prototype,"gdbVersion",void 0),s([o()],r.prototype,"imageFormat",void 0),s([V("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([o()],r.prototype,"imageTransparency",void 0),s([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([o({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([o()],r.prototype,"sourceJSON",void 0),s([o({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([z("sublayers",{layers:{type:[W]},visibleLayers:{type:[C]}})],r.prototype,"writeSublayers",null),s([o({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([o({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([o(G)],r.prototype,"url",void 0),r=s([H("esri.layers.MapImageLayer")],r);const re=r;export{re as default};
