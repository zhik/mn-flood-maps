import{et as s,e7 as a,aH as r,aI as p,aJ as o}from"./index.13375249.js";import{f as g,u as m}from"./LayerView.9226b744.js";import{i as l}from"./GraphicContainer.b0b549bd.js";import{a as c}from"./BaseGraphicContainer.eac676e1.js";import"./utils.5547bb95.js";import"./Utils.c545520e.js";import"./Texture.cbe42c09.js";import"./MaterialKey.40c8cf0d.js";import"./CIMSymbolHelper.2581653a.js";import"./BidiEngine.ec67919b.js";import"./normalizeUtilsSync.0c962a4c.js";import"./projectionSupport.1f8657e5.js";import"./json.d1a0fa35.js";import"./VertexArrayObject.f8d74f02.js";import"./FeatureContainer.c4ae95b8.js";import"./TileContainer.c3c0bdae.js";import"./WGLContainer.a632ae66.js";import"./pixelUtils.fbd28db8.js";import"./ProgramTemplate.8a061f2e.js";import"./config.40d47db8.js";import"./GeometryUtils.8166011b.js";import"./earcut.d30cbec0.js";import"./visualVariablesUtils.1b0a49b3.js";import"./visualVariablesUtils.6b3b0e76.js";import"./Matcher.dfab1a8d.js";import"./tileUtils.15292141.js";import"./TileClipper.f40b155a.js";import"./ExpandedCIM.25ecb4b1.js";import"./quantizationUtils.3e30225a.js";import"./devEnvironmentUtils.8c6e6b72.js";import"./schemaUtils.3945fef4.js";import"./createSymbolSchema.b0611ecb.js";import"./MD5.97b39efc.js";import"./util.3738f994.js";import"./ComputedAttributeStorage.7b31253d.js";import"./centroid.a445ede5.js";import"./vec3f32.8d37ecf5.js";const n={remove(){},pause(){},resume(){}};let h=class extends g(m){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new l(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof s?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):a.isCollection(i)&&i.length>0&&(t=i.map(e=>e&&e.uid).toArray()),t=t==null?void 0:t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):n}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};r([p()],h.prototype,"graphicsView",void 0),h=r([o("esri.views.2d.layers.GraphicsLayerView2D")],h);const X=h;export{X as default};
